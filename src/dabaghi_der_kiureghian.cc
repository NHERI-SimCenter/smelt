#define _USE_MATH_DEFINES
#include <algorithm>
#include <cmath>
#include <ctime>
#include <memory>
#include <numeric>
#include <stdexcept>
#include <string>
#include <vector>
// Boost random generator
#include <boost/random/mersenne_twister.hpp>
#include <boost/random/uniform_real_distribution.hpp>
#include <boost/random/variate_generator.hpp>
// Eigen dense matrices
#include <Eigen/Dense>

#include "beta_dist.h"
#include "dabaghi_der_kiureghian.h"
#include "factory.h"
#include "function_dispatcher.h"
#include "json_object.h"
#include "normal_dist.h"
#include "normal_multivar.h"
#include "numeric_utils.h"

stochastic::DabaghiDerKiureghian::DabaghiDerKiureghian(
    stochastic::FaultType faulting, stochastic::SimulationType simulation_type,
    double moment_magnitude, double depth_to_rupt, double rupture_distance,
    double vs30, double s_or_d, double theta_or_phi, unsigned int num_sims,
    unsigned int num_params, bool truncate)
    : StochasticModel(),
      faulting_{faulting},
      sim_type_{simulation_type},
      moment_magnitude_{moment_magnitude},
      depth_to_rupt_{depth_to_rupt},
      rupture_dist_{rupture_distance},
      vs30_{vs30},
      s_or_d_{s_or_d},
      theta_or_phi_{theta_or_phi},
      truncate_{truncate},
      num_params_{num_params},
      seed_value_{std::numeric_limits<int>::infinity()},
      time_step_{0.005}
{
  model_name_ = "DabaghiDerKiureghian";
  num_sims_pulse_ = simulate_pulse_type(num_sims);
  num_sims_nopulse_ = num_sims - num_sims_pulse_;

  // Initialize multivariate normal generator without seed
  sample_generator_ =
      Factory<numeric_utils::RandomGenerator>::instance()->create(
          "MultivariateNormal");
  
  // Set regression constants
  std_dev_pulse_.resize(19);
  std_dev_nopulse_.resize(14);
  corr_matrix_pulse_.resize(19, 19);
  corr_matrix_nopulse_.resize(14, 14);
  beta_distribution_pulse_.resize(19, 8);
  beta_distribution_nopulse_.resize(14, 8);

  // clang-format off
  std_dev_pulse_ <<
      0.385316782551070, 0.580604607504062, 1.000000000000000,
      1.000000000000000, 0.468600626648626, 0.781462017439926,
      0.371951335342951, 0.442124880737131, 0.393548709857826,
      0.409988222892834, 0.820134132413354, 1.096436125406160,
      0.746552904533869, 0.402440900041447, 0.461424491954810,
      0.407724539607907, 0.440166826670740, 0.824632603897275,
      0.961997443697123;
  std_dev_nopulse_ <<
      1.052723262620090, 0.398427668080412, 0.456828618083131,
      0.305727090125879, 0.447517114210032, 0.941288665677244,
      1.007680943597980, 1.028226030318770, 0.375877126809162,
      0.458413470215522, 0.294118965466636, 0.399966941388161,
      0.831550984874095, 0.887870513796394;

  corr_matrix_pulse_ <<
      1, -0.175836500638571, -0.0203457508302324, 0.173589795302921, 0.191081284058678, 0.446601858355920, 0.0422292189436895, 0.0268120615665615, 0.120003074985399, -0.382241273128019, 0.0573276270760638, 0.155115849407343, 0.407222009805941, -0.0405527073664880, 0.0164573906036360, 0.0415103476380082, -0.282855958356553, 0.106173613413053, 0.0486136094283240,
      -0.175836500638571, 1, 0.183359484001117, 0.00131202858838653, 0.431552926960257, -0.0802776119560438, 0.0983744630339078, 0.310456055209018, 0.368157334142620, 0.0509849248659661, 0.0223164167958617, 0.175239604674009, -0.0979434412969958, 0.143078236501468, 0.295214504980143, 0.370873286184142, 0.0409704140512328, -0.0681917932721656, 0.243299650091412,
      -0.0203457508302324, 0.183359484001117, 1, -0.190019984820145, 0.242770958876810, 0.178170099097870, 0.107202069371700, 0.150512140384424, 0.236433714526518, -0.114026379004051, 0.0535511100783777, 0.0642193542887409, 0.0688913090123055, 0.127858468767928, 0.0893601270266779, 0.213748741406994, -0.0697188946975121, 0.0212082250410815, 0.123098089235859,
      0.173589795302921, 0.00131202858838653, -0.190019984820145, 1, 0.119159474433286, -0.0812496120969922, 0.0911626190533515, 0.0653720081018262, 0.0718151835177181, -0.133641807530098, -0.0920397447082436, 0.0299407456292105, -0.0242282623085006, -0.0172855366304964, 0.0663348465393307, 0.0729217102589892, -0.146245197915904, 0.0999563418090508, -0.0409433584122388,
      0.191081284058678, 0.431552926960257, 0.242770958876810, 0.119159474433286, 1, 0.0597439686298471, 0.163724290728144, 0.733127256394521, 0.788656583220928, -0.0312901152364670, -0.153794052040040, 0.126072923696987, 0.0157717534215698, 0.186868291148981, 0.680765575675777, 0.749289248752773, 0.00752109582582447, -0.165776964800244, 0.192516732945902,
      0.446601858355920, -0.0802776119560438, 0.178170099097870, -0.0812496120969922, 0.0597439686298471, 1, -0.0244049816649646, 0.0584250580150467, 0.0856617566986387, 0.0783654782068241, 0.0990943110343599, 0.0264806656713516, 0.837794567493788, 0.0235744551632278, 0.00722635162195151, 0.0801743456052000, 0.125480219427063, 0.0813027074983168, 0.0454360407125637,
      0.0422292189436895, 0.0983744630339078, 0.107202069371700, 0.0911626190533515, 0.163724290728144, -0.0244049816649646, 1, 0.0612360822187756, 0.245411252666782, -0.0247015935697729, -0.224809121780326, 0.0459354003374228, 0.0364365286784528, 0.760546075583923, 0.0370009049319755, 0.205658174145097, -0.0837872744722257, -0.0338684418879410, -0.0274880324550587,
      0.0268120615665615, 0.310456055209018, 0.150512140384424, 0.0653720081018262, 0.733127256394521, 0.0584250580150467, 0.0612360822187756, 1, 0.855219194729329, 0.0120435632525462, -0.0489647334211007, 0.199955997824984, 0.0212627853872894, 0.146801029873847, 0.931624963947970, 0.850430406207709, 0.0232039506387295, -0.00394570150177181, 0.244390432559234,
      0.120003074985399, 0.368157334142620, 0.236433714526518, 0.0718151835177181, 0.788656583220928, 0.0856617566986387, 0.245411252666782, 0.855219194729329, 1, 0.0298843738756568, -0.0618147333807716, 0.197760496777865, 0.104861038989822, 0.262606914312613, 0.795537444898935, 0.906602423826413, 0.0381266607245457, -0.0143594270096637, 0.226001111347866,
      -0.382241273128019, 0.0509849248659661, -0.114026379004051, -0.133641807530098, -0.0312901152364670, 0.0783654782068241, -0.0247015935697729, 0.0120435632525462, 0.0298843738756568, 1, -0.241519621897699, 0.112473855187119, 0.171776282660699, -0.0492035952139502, 0.0493755848461730, 0.112703656481410, 0.864715714588433, -0.286206615545551, 0.157882561174870,
      0.0573276270760638, 0.0223164167958617, 0.0535511100783777, -0.0920397447082436, -0.153794052040040, 0.0990943110343599, -0.224809121780326, -0.0489647334211007, -0.0618147333807716, -0.241519621897699, 1, 0.112365366315021, -0.0106706754632641, -0.0488287220881385, -0.0635241398373312, -0.0911374530847290, -0.0885687207002145, 0.421522224993818, 0.239492035016932,
      0.155115849407343, 0.175239604674009, 0.0642193542887409, 0.0299407456292105, 0.126072923696987, 0.0264806656713516, 0.0459354003374228, 0.199955997824984, 0.197760496777865, 0.112473855187119, 0.112365366315021, 1, -0.0274158393051499, 0.0871234642667006, 0.160919524797887, 0.256368904115107, 0.275537783357955, -0.175867301345906, 0.792491388890200,
      0.407222009805941, -0.0979434412969958, 0.0688913090123055, -0.0242282623085006, 0.0157717534215698, 0.837794567493788, 0.0364365286784528, 0.0212627853872894, 0.104861038989822, 0.171776282660699, -0.0106706754632641, -0.0274158393051499, 1, -0.168436208860883, 0.0139228196755138, 0.0606940022435021, 0.0950730856215810, 0.166344473008140, -0.0377746475967110,
      -0.0405527073664880, 0.143078236501468, 0.127858468767928, -0.0172855366304964, 0.186868291148981, 0.0235744551632278, 0.760546075583923, 0.146801029873847, 0.262606914312613, -0.0492035952139502, -0.0488287220881385, 0.0871234642667006, -0.168436208860883, 1, 0.0584697041090115, 0.243068478704018, 0.0101378284587601, -0.134310788077535, 0.0858141211009980,
      0.0164573906036360, 0.295214504980143, 0.0893601270266779, 0.0663348465393307, 0.680765575675777, 0.00722635162195151, 0.0370009049319755, 0.931624963947970, 0.795537444898935, 0.0493755848461730, -0.0635241398373312, 0.160919524797887, 0.0139228196755138, 0.0584697041090115, 1, 0.841226866362572, 0.0319804533198723, 0.0395868643324250, 0.183336741524880,
      0.0415103476380082, 0.370873286184142, 0.213748741406994, 0.0729217102589892, 0.749289248752773, 0.0801743456052000, 0.205658174145097, 0.850430406207709, 0.906602423826413, 0.112703656481410, -0.0911374530847290, 0.256368904115107, 0.0606940022435021, 0.243068478704018, 0.841226866362572, 1, 0.0999775444207582, -0.0848763381048173, 0.277349661980356,
      -0.282855958356553, 0.0409704140512328, -0.0697188946975121, -0.146245197915904, 0.00752109582582447, 0.125480219427063, -0.0837872744722257, 0.0232039506387295, 0.0381266607245457, 0.864715714588433, -0.0885687207002145, 0.275537783357955, 0.0950730856215810, 0.0101378284587601, 0.0319804533198723, 0.0999775444207582, 1, -0.432951535761925, 0.262376572921422,
      0.106173613413053, -0.0681917932721656, 0.0212082250410815, 0.0999563418090508, -0.165776964800244, 0.0813027074983168, -0.0338684418879410, -0.00394570150177181, -0.0143594270096637, -0.286206615545551, 0.421522224993818, -0.175867301345906, 0.166344473008140, -0.134310788077535, 0.0395868643324250, -0.0848763381048173, -0.432951535761925, 1, -0.184861197592255,
      0.0486136094283240, 0.243299650091412, 0.123098089235859, -0.0409433584122388, 0.192516732945902, 0.0454360407125637, -0.0274880324550587, 0.244390432559234, 0.226001111347866, 0.157882561174870, 0.239492035016932, 0.792491388890200, -0.0377746475967110, 0.0858141211009980, 0.183336741524880, 0.277349661980356, 0.262376572921422, -0.184861197592255, 1;

  corr_matrix_nopulse_ <<
      1, -0.183620641202513, 0.0890171218487119, 0.104132896092390, 0.0143281984142704, 0.202871723469377, -0.151909317725644, 0.945163870283100, -0.0778432911362303, 0.0495683691288216, 0.0966843496273208, 0.0917721771113965, 0.103741261286614, -0.121195511065596,
      -0.183620641202513, 1, 0.0854423655718587, 0.307373593686928, -0.0150490152853094, -0.149397471797000, 0.0888348816281089, -0.0794047082384602, 0.848433024094089, 0.0950830201555768, 0.288741920713302, -0.0596971902001111, -0.0160895956989375, 0.113905908782625,
      0.0890171218487119, 0.0854423655718587, 1, 0.813213357087557, -0.225438606252670, 0.000735703328121357, -0.0840944291284059, 0.0562899783045387, 0.137192754102300, 0.907605550316775, 0.788263163970441, -0.189167012249831, -0.0219422025252862, -0.0931560965857281,
      0.104132896092390, 0.307373593686928, 0.813213357087557, 1, -0.162877782549727, -0.0946212742252604, -0.0192432432422716, 0.131014027317413, 0.289495591671556, 0.752836252137069, 0.908489822222397, -0.151488045845577, -0.0637984858287899, -0.0498615936932623,
      0.0143281984142704, -0.0150490152853094, -0.225438606252670, -0.162877782549727, 1, -0.187527904866745, -0.163661457269968, 0.0720174301613615, -0.0805658506819631, -0.173027594836660, -0.165135405413428, 0.897082085156820, -0.0778400029130002, -0.00420375269007833,
      0.202871723469377, -0.149397471797000, 0.000735703328121357, -0.0946212742252604, -0.187527904866745, 1, -0.0853760806838177, 0.151981779909482, -0.0282514238500333, 0.00217240817323823, -0.0879254146125414, -0.0874961774514421, 0.647468312996265, -0.157070775414507,
      -0.151909317725644, 0.0888348816281089, -0.0840944291284059, -0.0192432432422716, -0.163661457269968, -0.0853760806838177, 1, -0.109821275189057, 0.0605607584025393, -0.0674419385042876, -0.0178734643092523, -0.0879585887923949, -0.105931812299965, 0.761324011431321,
      0.945163870283100, -0.0794047082384602, 0.0562899783045387, 0.131014027317413, 0.0720174301613615, 0.151981779909482, -0.109821275189057, 1, -0.0744735914486929, 0.0477307773362732, 0.116976058986177, 0.104731056969540, 0.137507782979518, -0.107158677162180,
      -0.0778432911362303, 0.848433024094089, 0.137192754102300, 0.289495591671556, -0.0805658506819631, -0.0282514238500333, 0.0605607584025393, -0.0744735914486929, 1, 0.0782297693189997, 0.294723991917604, -0.0895932216480470, -0.0501878780366773, 0.0967842822751738,
      0.0495683691288216, 0.0950830201555768, 0.907605550316775, 0.752836252137069, -0.173027594836660, 0.00217240817323823, -0.0674419385042876, 0.0477307773362732, 0.0782297693189997, 1, 0.786122088469745, -0.177521125226899, 0.00868592321024064, -0.0671981184080449,
      0.0966843496273208, 0.288741920713302, 0.788263163970441, 0.908489822222397, -0.165135405413428, -0.0879254146125414, -0.0178734643092523, 0.116976058986177, 0.294723991917604, 0.786122088469745, 1, -0.168356869639510, -0.0773913106180435, -0.0274804568206274,
      0.0917721771113965, -0.0596971902001111, -0.189167012249831, -0.151488045845577, 0.897082085156820, -0.0874961774514421, -0.0879585887923949, 0.104731056969540, -0.0895932216480470, -0.177521125226899, -0.168356869639510, 1, -0.183773515755380, 0.00693211686662153,
      0.103741261286614, -0.0160895956989375, -0.0219422025252862, -0.0637984858287899, -0.0778400029130002, 0.647468312996265, -0.105931812299965, 0.137507782979518, -0.0501878780366773, 0.00868592321024064, -0.0773913106180435, -0.183773515755380, 1, -0.110874872058067,
      -0.121195511065596, 0.113905908782625, -0.0931560965857281, -0.0498615936932623, -0.00420375269007833, -0.157070775414507, 0.761324011431321, -0.107158677162180, 0.0967842822751738, -0.0671981184080449, -0.0274804568206274, 0.00693211686662153, -0.110874872058067, 1;

  beta_distribution_pulse_ <<
    1.69862554416145, 0.608190177030033, -0.608190177030033, -0.576217471720854, 0, 0.183071013159864, -0.0939319189357984, 0.00657091132855174,
    -2.47924338395758, 0.670395625327187, 0, 0, 0, -0.263957799575519, -0.232548659903406, 0.00791988432530859,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    -4.24873260256537, 0.852185710838635, 0, 0.389602053633798, 0, -0.380323064996537, -0.0880126751081291, 0,
    -2.11599237942931, 1.47405211856417, -1.37810504103118, -1.07311968166742, 0, 0.336513504829882, 0, 0,
    -0.381092000896248, 0.732824259094057, 0, 0.216502277780155, 0, -0.162653108888503, -0.426573570884097, 0,
    -5.56310544580757, 0.905239391642438, 0, 0.385150957140062, 0, -0.282428134685156, 0, 0,
    -4.77682417817789, 0.879981585446539, 0, 0.310609998745732, 0, -0.339225914155431, 0, 0,
    0.966712608298821, -0.110938996751065, 0, 0, 0, 0, 0.183289269601829, 0,
    -2.16587686889173, 0.321501356495567, 0, 0, 0, 0, 0, 0,
    -1.70734873800232, 0.433032709755610, 0, -0.412648447269525, 0, 0, 0, 0,
    -0.263198077701693, 1.13060571952101, -1.16957372638359, -1.65164476300789, 0.104746885300915, 0.404058507352901, 0, 0,
    -0.515969600508314, 0.754135122993588, 0, 0.191575083960373, 0, -0.121665118341219, -0.423844926774291, 0,
    -5.77208004012831, 0.923144661954273, 0, 0.402940883581593, 0, -0.238200773846646, 0, 0,
    -5.01588271867143, 0.905027154000921, 0, 0.326841161038211, 0, -0.328283913521590, 0, 0,
    0.434339606308037, -0.125225415996048, 0, 0, 0, 0, 0.301631247865572, 0,
    -2.87544520181323, 0.415682222485807, 0, 0, 0, 0, 0, 0,
    -1.86755738290362, 0.457448335779201, 0, -0.501103981295545, 0, 0, 0, 0;

  beta_distribution_nopulse_ <<
    8.09695881287823, 1.00609515629221, -1.39347614723327, -4.85869770683701, 0.472644100309933, 0.434550762616159, -0.862562872197509, 0,
    -1.03473761679032, 0.769091178587874, 0, 0.412237308297152, 0, -0.377739650769220, -0.424234099315427, 0,
    -4.72728279119446, 0.709717476708319, 0, 0.470974168011549, 0, -0.123518047425648, 0, 0,
    -4.44400222195478, 0.798093247074753, 0, 0.345405210060350, 0, -0.230823340141895, 0, 0,
    0.247133528936450, -0.149209862203390, 0, 0, 0, 0, 0.377202902904920, 0,
    -1.44302935447839, 0.223053706671624, 0, 0, 0, 0, 0, 0,
    -0.380413278316438, 0.159342468070527, 0, -0.298208438215333, 0, 0, 0, 0,
    7.30682757526241, 0.999256668956432, -1.33082594407524, -4.95306361630276, 0.490554994733579, 0.442502068793772, -0.835310070621911, 0,
    -0.403711730133755, 0.672375321924977, 0, 0.335372498461681, 0, -0.330322239630250, -0.366700025738387, 0,
    -4.79820204505010, 0.709160958437296, 0, 0.472560804537015, 0, -0.0755764830052928, 0, 0,
    -4.35041760661412, 0.785290791385159, 0, 0.325462132630085, 0, -0.221525656800750, 0, 0,
    0.424849811725595, -0.181204207590470, 0, 0, 0, 0, 0.401549107903204, 0,
    -2.97911606394595, 0.420016455603546, 0, 0, 0, 0, 0, 0,
    -0.703694160589291, 0.160571013696218, 0, -0.145792047865653, 0, 0, 0, 0;

  params_lower_bound_ << 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -3.5, -4.7, 0, 0, 0, 0, 0, -3.5, -4.7;
  
  params_upper_bound_ << 0, 0, 3.2, 2, 0, 0, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 0, 0, 1.5, 0;
  
  params_fitted1_ << 0, 0, 1.30326178289206, 0, 0, 0, 0, 0, 0, 0, 14.2935537214223, 5.33551936215137, 0, 0, 0, 0, 0, 14.2935537214223, 5.33551936215137;
  
  params_fitted2_ << 0, 0, 3.96858083951547, 0, 0, 0, 0, 0, 0, 0, 6.40242376475815, 3.82954843573707, 0, 0, 0, 0, 0, 6.40242376475815, 3.82954843573707;

  params_fitted3_ << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.42179588354923, 0, 0, 0, 0, 0, 0, 4.42179588354923, 0;
  // clang-format on  
}

stochastic::DabaghiDerKiureghian::DabaghiDerKiureghian(
    stochastic::FaultType faulting, stochastic::SimulationType simulation_type,
    double moment_magnitude, double depth_to_rupt, double rupture_distance,
    double vs30, double s_or_d, double theta_or_phi, unsigned int num_sims,
    unsigned int num_params, bool truncate, int seed_value)
    : StochasticModel(),
      faulting_{faulting},
      sim_type_{simulation_type},
      moment_magnitude_{moment_magnitude},
      depth_to_rupt_{depth_to_rupt},
      rupture_dist_{rupture_distance},
      vs30_{vs30},
      s_or_d_{s_or_d},
      theta_or_phi_{theta_or_phi},
      truncate_{truncate},
      num_params_{num_params},
      seed_value_{seed_value},
      time_step_{0.005}
{
  model_name_ = "DabaghiDerKiureghian";
  num_sims_pulse_ = simulate_pulse_type(num_sims);
  num_sims_nopulse_ = num_sims - num_sims_pulse_;

  // Initialize multivariate normal generator without seed
  sample_generator_ =
      Factory<numeric_utils::RandomGenerator, int>::instance()->create(
          "MultivariateNormal", std::move(seed_value_));
  
  // Set regression constants
  std_dev_pulse_.resize(19);
  std_dev_nopulse_.resize(14);
  corr_matrix_pulse_.resize(19, 19);
  corr_matrix_nopulse_.resize(14, 14);

  // clang-format off
  std_dev_pulse_ <<
      0.385316782551070, 0.580604607504062, 1.000000000000000,
      1.000000000000000, 0.468600626648626, 0.781462017439926,
      0.371951335342951, 0.442124880737131, 0.393548709857826,
      0.409988222892834, 0.820134132413354, 1.096436125406160,
      0.746552904533869, 0.402440900041447, 0.461424491954810,
      0.407724539607907, 0.440166826670740, 0.824632603897275,
      0.961997443697123;
  std_dev_nopulse_ <<
      1.052723262620090, 0.398427668080412, 0.456828618083131,
      0.305727090125879, 0.447517114210032, 0.941288665677244,
      1.007680943597980, 1.028226030318770, 0.375877126809162,
      0.458413470215522, 0.294118965466636, 0.399966941388161,
      0.831550984874095, 0.887870513796394;

  corr_matrix_pulse_ <<
      1, -0.175836500638571, -0.0203457508302324, 0.173589795302921, 0.191081284058678, 0.446601858355920, 0.0422292189436895, 0.0268120615665615, 0.120003074985399, -0.382241273128019, 0.0573276270760638, 0.155115849407343, 0.407222009805941, -0.0405527073664880, 0.0164573906036360, 0.0415103476380082, -0.282855958356553, 0.106173613413053, 0.0486136094283240,
      -0.175836500638571, 1, 0.183359484001117, 0.00131202858838653, 0.431552926960257, -0.0802776119560438, 0.0983744630339078, 0.310456055209018, 0.368157334142620, 0.0509849248659661, 0.0223164167958617, 0.175239604674009, -0.0979434412969958, 0.143078236501468, 0.295214504980143, 0.370873286184142, 0.0409704140512328, -0.0681917932721656, 0.243299650091412,
      -0.0203457508302324, 0.183359484001117, 1, -0.190019984820145, 0.242770958876810, 0.178170099097870, 0.107202069371700, 0.150512140384424, 0.236433714526518, -0.114026379004051, 0.0535511100783777, 0.0642193542887409, 0.0688913090123055, 0.127858468767928, 0.0893601270266779, 0.213748741406994, -0.0697188946975121, 0.0212082250410815, 0.123098089235859,
      0.173589795302921, 0.00131202858838653, -0.190019984820145, 1, 0.119159474433286, -0.0812496120969922, 0.0911626190533515, 0.0653720081018262, 0.0718151835177181, -0.133641807530098, -0.0920397447082436, 0.0299407456292105, -0.0242282623085006, -0.0172855366304964, 0.0663348465393307, 0.0729217102589892, -0.146245197915904, 0.0999563418090508, -0.0409433584122388,
      0.191081284058678, 0.431552926960257, 0.242770958876810, 0.119159474433286, 1, 0.0597439686298471, 0.163724290728144, 0.733127256394521, 0.788656583220928, -0.0312901152364670, -0.153794052040040, 0.126072923696987, 0.0157717534215698, 0.186868291148981, 0.680765575675777, 0.749289248752773, 0.00752109582582447, -0.165776964800244, 0.192516732945902,
      0.446601858355920, -0.0802776119560438, 0.178170099097870, -0.0812496120969922, 0.0597439686298471, 1, -0.0244049816649646, 0.0584250580150467, 0.0856617566986387, 0.0783654782068241, 0.0990943110343599, 0.0264806656713516, 0.837794567493788, 0.0235744551632278, 0.00722635162195151, 0.0801743456052000, 0.125480219427063, 0.0813027074983168, 0.0454360407125637,
      0.0422292189436895, 0.0983744630339078, 0.107202069371700, 0.0911626190533515, 0.163724290728144, -0.0244049816649646, 1, 0.0612360822187756, 0.245411252666782, -0.0247015935697729, -0.224809121780326, 0.0459354003374228, 0.0364365286784528, 0.760546075583923, 0.0370009049319755, 0.205658174145097, -0.0837872744722257, -0.0338684418879410, -0.0274880324550587,
      0.0268120615665615, 0.310456055209018, 0.150512140384424, 0.0653720081018262, 0.733127256394521, 0.0584250580150467, 0.0612360822187756, 1, 0.855219194729329, 0.0120435632525462, -0.0489647334211007, 0.199955997824984, 0.0212627853872894, 0.146801029873847, 0.931624963947970, 0.850430406207709, 0.0232039506387295, -0.00394570150177181, 0.244390432559234,
      0.120003074985399, 0.368157334142620, 0.236433714526518, 0.0718151835177181, 0.788656583220928, 0.0856617566986387, 0.245411252666782, 0.855219194729329, 1, 0.0298843738756568, -0.0618147333807716, 0.197760496777865, 0.104861038989822, 0.262606914312613, 0.795537444898935, 0.906602423826413, 0.0381266607245457, -0.0143594270096637, 0.226001111347866,
      -0.382241273128019, 0.0509849248659661, -0.114026379004051, -0.133641807530098, -0.0312901152364670, 0.0783654782068241, -0.0247015935697729, 0.0120435632525462, 0.0298843738756568, 1, -0.241519621897699, 0.112473855187119, 0.171776282660699, -0.0492035952139502, 0.0493755848461730, 0.112703656481410, 0.864715714588433, -0.286206615545551, 0.157882561174870,
      0.0573276270760638, 0.0223164167958617, 0.0535511100783777, -0.0920397447082436, -0.153794052040040, 0.0990943110343599, -0.224809121780326, -0.0489647334211007, -0.0618147333807716, -0.241519621897699, 1, 0.112365366315021, -0.0106706754632641, -0.0488287220881385, -0.0635241398373312, -0.0911374530847290, -0.0885687207002145, 0.421522224993818, 0.239492035016932,
      0.155115849407343, 0.175239604674009, 0.0642193542887409, 0.0299407456292105, 0.126072923696987, 0.0264806656713516, 0.0459354003374228, 0.199955997824984, 0.197760496777865, 0.112473855187119, 0.112365366315021, 1, -0.0274158393051499, 0.0871234642667006, 0.160919524797887, 0.256368904115107, 0.275537783357955, -0.175867301345906, 0.792491388890200,
      0.407222009805941, -0.0979434412969958, 0.0688913090123055, -0.0242282623085006, 0.0157717534215698, 0.837794567493788, 0.0364365286784528, 0.0212627853872894, 0.104861038989822, 0.171776282660699, -0.0106706754632641, -0.0274158393051499, 1, -0.168436208860883, 0.0139228196755138, 0.0606940022435021, 0.0950730856215810, 0.166344473008140, -0.0377746475967110,
      -0.0405527073664880, 0.143078236501468, 0.127858468767928, -0.0172855366304964, 0.186868291148981, 0.0235744551632278, 0.760546075583923, 0.146801029873847, 0.262606914312613, -0.0492035952139502, -0.0488287220881385, 0.0871234642667006, -0.168436208860883, 1, 0.0584697041090115, 0.243068478704018, 0.0101378284587601, -0.134310788077535, 0.0858141211009980,
      0.0164573906036360, 0.295214504980143, 0.0893601270266779, 0.0663348465393307, 0.680765575675777, 0.00722635162195151, 0.0370009049319755, 0.931624963947970, 0.795537444898935, 0.0493755848461730, -0.0635241398373312, 0.160919524797887, 0.0139228196755138, 0.0584697041090115, 1, 0.841226866362572, 0.0319804533198723, 0.0395868643324250, 0.183336741524880,
      0.0415103476380082, 0.370873286184142, 0.213748741406994, 0.0729217102589892, 0.749289248752773, 0.0801743456052000, 0.205658174145097, 0.850430406207709, 0.906602423826413, 0.112703656481410, -0.0911374530847290, 0.256368904115107, 0.0606940022435021, 0.243068478704018, 0.841226866362572, 1, 0.0999775444207582, -0.0848763381048173, 0.277349661980356,
      -0.282855958356553, 0.0409704140512328, -0.0697188946975121, -0.146245197915904, 0.00752109582582447, 0.125480219427063, -0.0837872744722257, 0.0232039506387295, 0.0381266607245457, 0.864715714588433, -0.0885687207002145, 0.275537783357955, 0.0950730856215810, 0.0101378284587601, 0.0319804533198723, 0.0999775444207582, 1, -0.432951535761925, 0.262376572921422,
      0.106173613413053, -0.0681917932721656, 0.0212082250410815, 0.0999563418090508, -0.165776964800244, 0.0813027074983168, -0.0338684418879410, -0.00394570150177181, -0.0143594270096637, -0.286206615545551, 0.421522224993818, -0.175867301345906, 0.166344473008140, -0.134310788077535, 0.0395868643324250, -0.0848763381048173, -0.432951535761925, 1, -0.184861197592255,
      0.0486136094283240, 0.243299650091412, 0.123098089235859, -0.0409433584122388, 0.192516732945902, 0.0454360407125637, -0.0274880324550587, 0.244390432559234, 0.226001111347866, 0.157882561174870, 0.239492035016932, 0.792491388890200, -0.0377746475967110, 0.0858141211009980, 0.183336741524880, 0.277349661980356, 0.262376572921422, -0.184861197592255, 1;

  corr_matrix_nopulse_ <<
      1, -0.183620641202513, 0.0890171218487119, 0.104132896092390, 0.0143281984142704, 0.202871723469377, -0.151909317725644, 0.945163870283100, -0.0778432911362303, 0.0495683691288216, 0.0966843496273208, 0.0917721771113965, 0.103741261286614, -0.121195511065596,
      -0.183620641202513, 1, 0.0854423655718587, 0.307373593686928, -0.0150490152853094, -0.149397471797000, 0.0888348816281089, -0.0794047082384602, 0.848433024094089, 0.0950830201555768, 0.288741920713302, -0.0596971902001111, -0.0160895956989375, 0.113905908782625,
      0.0890171218487119, 0.0854423655718587, 1, 0.813213357087557, -0.225438606252670, 0.000735703328121357, -0.0840944291284059, 0.0562899783045387, 0.137192754102300, 0.907605550316775, 0.788263163970441, -0.189167012249831, -0.0219422025252862, -0.0931560965857281,
      0.104132896092390, 0.307373593686928, 0.813213357087557, 1, -0.162877782549727, -0.0946212742252604, -0.0192432432422716, 0.131014027317413, 0.289495591671556, 0.752836252137069, 0.908489822222397, -0.151488045845577, -0.0637984858287899, -0.0498615936932623,
      0.0143281984142704, -0.0150490152853094, -0.225438606252670, -0.162877782549727, 1, -0.187527904866745, -0.163661457269968, 0.0720174301613615, -0.0805658506819631, -0.173027594836660, -0.165135405413428, 0.897082085156820, -0.0778400029130002, -0.00420375269007833,
      0.202871723469377, -0.149397471797000, 0.000735703328121357, -0.0946212742252604, -0.187527904866745, 1, -0.0853760806838177, 0.151981779909482, -0.0282514238500333, 0.00217240817323823, -0.0879254146125414, -0.0874961774514421, 0.647468312996265, -0.157070775414507,
      -0.151909317725644, 0.0888348816281089, -0.0840944291284059, -0.0192432432422716, -0.163661457269968, -0.0853760806838177, 1, -0.109821275189057, 0.0605607584025393, -0.0674419385042876, -0.0178734643092523, -0.0879585887923949, -0.105931812299965, 0.761324011431321,
      0.945163870283100, -0.0794047082384602, 0.0562899783045387, 0.131014027317413, 0.0720174301613615, 0.151981779909482, -0.109821275189057, 1, -0.0744735914486929, 0.0477307773362732, 0.116976058986177, 0.104731056969540, 0.137507782979518, -0.107158677162180,
      -0.0778432911362303, 0.848433024094089, 0.137192754102300, 0.289495591671556, -0.0805658506819631, -0.0282514238500333, 0.0605607584025393, -0.0744735914486929, 1, 0.0782297693189997, 0.294723991917604, -0.0895932216480470, -0.0501878780366773, 0.0967842822751738,
      0.0495683691288216, 0.0950830201555768, 0.907605550316775, 0.752836252137069, -0.173027594836660, 0.00217240817323823, -0.0674419385042876, 0.0477307773362732, 0.0782297693189997, 1, 0.786122088469745, -0.177521125226899, 0.00868592321024064, -0.0671981184080449,
      0.0966843496273208, 0.288741920713302, 0.788263163970441, 0.908489822222397, -0.165135405413428, -0.0879254146125414, -0.0178734643092523, 0.116976058986177, 0.294723991917604, 0.786122088469745, 1, -0.168356869639510, -0.0773913106180435, -0.0274804568206274,
      0.0917721771113965, -0.0596971902001111, -0.189167012249831, -0.151488045845577, 0.897082085156820, -0.0874961774514421, -0.0879585887923949, 0.104731056969540, -0.0895932216480470, -0.177521125226899, -0.168356869639510, 1, -0.183773515755380, 0.00693211686662153,
      0.103741261286614, -0.0160895956989375, -0.0219422025252862, -0.0637984858287899, -0.0778400029130002, 0.647468312996265, -0.105931812299965, 0.137507782979518, -0.0501878780366773, 0.00868592321024064, -0.0773913106180435, -0.183773515755380, 1, -0.110874872058067,
      -0.121195511065596, 0.113905908782625, -0.0931560965857281, -0.0498615936932623, -0.00420375269007833, -0.157070775414507, 0.761324011431321, -0.107158677162180, 0.0967842822751738, -0.0671981184080449, -0.0274804568206274, 0.00693211686662153, -0.110874872058067, 1;

  beta_distribution_pulse_ <<
    1.69862554416145, 0.608190177030033, -0.608190177030033, -0.576217471720854, 0, 0.183071013159864, -0.0939319189357984, 0.00657091132855174,
    -2.47924338395758, 0.670395625327187, 0, 0, 0, -0.263957799575519, -0.232548659903406, 0.00791988432530859,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    -4.24873260256537, 0.852185710838635, 0, 0.389602053633798, 0, -0.380323064996537, -0.0880126751081291, 0,
    -2.11599237942931, 1.47405211856417, -1.37810504103118, -1.07311968166742, 0, 0.336513504829882, 0, 0,
    -0.381092000896248, 0.732824259094057, 0, 0.216502277780155, 0, -0.162653108888503, -0.426573570884097, 0,
    -5.56310544580757, 0.905239391642438, 0, 0.385150957140062, 0, -0.282428134685156, 0, 0,
    -4.77682417817789, 0.879981585446539, 0, 0.310609998745732, 0, -0.339225914155431, 0, 0,
    0.966712608298821, -0.110938996751065, 0, 0, 0, 0, 0.183289269601829, 0,
    -2.16587686889173, 0.321501356495567, 0, 0, 0, 0, 0, 0,
    -1.70734873800232, 0.433032709755610, 0, -0.412648447269525, 0, 0, 0, 0,
    -0.263198077701693, 1.13060571952101, -1.16957372638359, -1.65164476300789, 0.104746885300915, 0.404058507352901, 0, 0,
    -0.515969600508314, 0.754135122993588, 0, 0.191575083960373, 0, -0.121665118341219, -0.423844926774291, 0,
    -5.77208004012831, 0.923144661954273, 0, 0.402940883581593, 0, -0.238200773846646, 0, 0,
    -5.01588271867143, 0.905027154000921, 0, 0.326841161038211, 0, -0.328283913521590, 0, 0,
    0.434339606308037, -0.125225415996048, 0, 0, 0, 0, 0.301631247865572, 0,
    -2.87544520181323, 0.415682222485807, 0, 0, 0, 0, 0, 0,
    -1.86755738290362, 0.457448335779201, 0, -0.501103981295545, 0, 0, 0, 0;

  beta_distribution_nopulse_ <<
    8.09695881287823, 1.00609515629221, -1.39347614723327, -4.85869770683701, 0.472644100309933, 0.434550762616159, -0.862562872197509, 0,
    -1.03473761679032, 0.769091178587874, 0, 0.412237308297152, 0, -0.377739650769220, -0.424234099315427, 0,
    -4.72728279119446, 0.709717476708319, 0, 0.470974168011549, 0, -0.123518047425648, 0, 0,
    -4.44400222195478, 0.798093247074753, 0, 0.345405210060350, 0, -0.230823340141895, 0, 0,
    0.247133528936450, -0.149209862203390, 0, 0, 0, 0, 0.377202902904920, 0,
    -1.44302935447839, 0.223053706671624, 0, 0, 0, 0, 0, 0,
    -0.380413278316438, 0.159342468070527, 0, -0.298208438215333, 0, 0, 0, 0,
    7.30682757526241, 0.999256668956432, -1.33082594407524, -4.95306361630276, 0.490554994733579, 0.442502068793772, -0.835310070621911, 0,
    -0.403711730133755, 0.672375321924977, 0, 0.335372498461681, 0, -0.330322239630250, -0.366700025738387, 0,
    -4.79820204505010, 0.709160958437296, 0, 0.472560804537015, 0, -0.0755764830052928, 0, 0,
    -4.35041760661412, 0.785290791385159, 0, 0.325462132630085, 0, -0.221525656800750, 0, 0,
    0.424849811725595, -0.181204207590470, 0, 0, 0, 0, 0.401549107903204, 0,
    -2.97911606394595, 0.420016455603546, 0, 0, 0, 0, 0, 0,
    -0.703694160589291, 0.160571013696218, 0, -0.145792047865653, 0, 0, 0, 0;

  params_lower_bound_ << 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, -3.5, -4.7, 0, 0, 0, 0, 0, -3.5, -4.7;
  
  params_upper_bound_ << 0, 0, 3.2, 2, 0, 0, 0, 0, 0, 0, 1.5, 0, 0, 0, 0, 0, 0, 1.5, 0;
  
  params_fitted1_ << 0, 0, 1.30326178289206, 0, 0, 0, 0, 0, 0, 0, 14.2935537214223, 5.33551936215137, 0, 0, 0, 0, 0, 14.2935537214223, 5.33551936215137;
  
  params_fitted2_ << 0, 0, 3.96858083951547, 0, 0, 0, 0, 0, 0, 0, 6.40242376475815, 3.82954843573707, 0, 0, 0, 0, 0, 6.40242376475815, 3.82954843573707;

  params_fitted3_ << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.42179588354923, 0, 0, 0, 0, 0, 0, 4.42179588354923, 0;
  // clang-format on
}

unsigned int stochastic::DabaghiDerKiureghian::simulate_pulse_type(
    unsigned int num_sims) const {
  double pulse_probability = 0.0;

  // Calculate pulse probability for any type of pulse
  if (faulting == stochastic::StrikeSlip) {
    pulse_probability = 1.0 / (1.0 + std::exp(0.457 + 0.126 * rupture_dist_ -
                                              0.244 * std::sqrt(s_or_d_) +
                                              0.013 * theta_or_phi_));
  } else {
    pulse_probability = 1.0 / (1.0 + std::exp(0.304 + 0.072 * rupture_dist_ -
                                              0.208 * std::sqrt(s_or_d_) +
                                              0.021 * theta_or_phi_));
  }

  // Create random generator for uniform distribution between 0.0 and 1.0
  auto generator =
      seed_value_ != std::numeric_limits<int>::infinity()
          ? boost::random::mt19937(static_cast<unsigned int>(seed_value_))
          : boost::random::mt19937(
                static_cast<unsigned int>(std::time(nullptr)));

  boost::random::uniform_real_distribution<> distribution(0.0, 1.0);
  boost::random::variate_generator<boost::random::mt19937&,
                                   boost::random::uniform_real_distribution<>>
      pulse_gen(generator, distribution);

  unsigned int number_of_pulses = 0;

  for (unsigned int i = 0; i < num_sims_pulse_ + num_sims_nopulse_; ++i) {
    if (pulse_gen() < pulse_probability) {
      number_of_pulses++;
    }
  }

  return number_of_pulses;
}

Eigen::MatrixXd stochastic::DabaghiDerKiureghian::simulate_model_parameters(
    bool pulse_like, unsigned int num_sims) const {
  // Calculate covariance matrix
  Eigen::MatrixXd error_cov =
      pulse_like
          ? numeric_utils::corr_to_cov(corr_matrix_pulse_, std_dev_pulse_)
          : numeric_utils::corr_to_cov(corr_matrix_nopulse_, std_dev_nopulse_);

  Eigen::MatrixXd simulated_params =
      pulse_like ? Eigen::Zero(num_sims, 19)
                 : Eigen::Zero(num_sims, 14);

  Eigen::VectorXd error_mean = pulse_like ? Eigen::Zero(19) : Eigen::Zero(14);

  // Compute conditional mean values of transformed model parameters using
  // regression coefficients
  Eigen::VectorXd predicted_model_params =
      compute_transformed_model_parameters(pulse_like);

  Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> parameter_realizations;
  Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> epsilon;

  // Create simulated model parameters for specified number of motions
  double test;
  Eigen::VectorXd model_params(error_mean.size());

  // Loop over number of simulations requested, generating parameter realizations
  for (unsigned int i = 0; i < num_sims; ++i) {
    test = -1.0;

    // Continue looping in event parameters for pulse-like motion are unsatisfactory
    while (test < 0.0) {
      sample_generator_->generate(parameter_realizations, error_mean, error_cov,
                                  1);
      epsilon = pulse_like
                    ? parameter_realizations.cwiseQuotient(std_dev_pulse_)
                    : parameter_realizations.cwiseQuotient(std_dev_nopulse_);
      double max_epsilon = epsilon.cwiseAbs().maxCoeff();

      while (max_epsilon > 2.0) {
        sample_generator_->generate(parameter_realizations, error_mean,
                                    error_cov, 1);
        epsilon = pulse_like
                      ? parameter_realizations.cwiseQuotient(std_dev_pulse_)
                      : parameter_realizations.cwiseQuotient(std_dev_nopulse_);
        max_epsilon = epsilon.cwiseAbs().maxCoeff();
      }

      // Random realization of model parameters in normal space
      model_params = predicted_model_params + parameter_realizations;
      // Transform random realization to real space
      transform_parameters_from_normal_space(pulse_like, model_params);

      // Additional check on pulse-like parameters
      if (pulse_like) {
	test = model_params(4) - 0.5 * model_params(1) * model_params(2);
      } else {
	test = 1.0;
      }
    }

    // Set current row of parameter realizations to generated model parameters
    simulated_params.row(i) = model_params;
  }
  
  return simulated_params;
}

Eigen::VectorXd
    stochastic::DabaghiDerKiureghian::compute_transformed_model_parameters(
        bool pulse_like) const {
  // Calculate parameters and create parameter vector
  double depth_parameter = depth_to_rupt_ < 1.0 ? depth_to_rupt_ : 1.0;
  double site_parameter = vs30_ <= 1100.0 ? std::log(vs30_) : std::log(1100.0);
  double fault_parameter =
      faulting_ == stochastic::FaultType::StrikeSlip ? 0.0 : 1.0;

  Eigen::VectorXd params_vector(7);
  params_vector << 1.0, moment_magnitude_,
      moment_magnitude_ - magnitude_baseline_,
      std::log(std::sqrt(rupture_dist_ * rupture_dist_ + c6_ * c6_)),
      fault_parameter * depth_parameter, site_parameter, s_or_d_;

  // Calculate the mean predicted model parameters in normal space
  if (pulse_like) {
    return params_vector * beta_distribution_pulse_.transpose();
  } else {
    return params_vector * beta_distribution_nopulse_.transpose();
  }
}

void stochastic::DabaghiDerKiureghian::transform_parameters_from_normal_space(
    bool pulse_like, Eigen::VectorXd& parameters) const {
  Eigen::VectorXd transformed_params(parameters.size());
  auto standard_normal =
      Factory<stochastic::Distribution, double, double>::instance()->create(
          "NormalDist", std::move(0.0), std::move(1.0));

  if (pulse_like) {
    std::vector<unsigned int> indices = {0, 1, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16};
    for (auto const& index : indices) {
      transformed_params(index) = std::exp(parameters(index));
    }

    // Calculate gamma
    auto beta_dist =
        Factory<stochastic::Distribution, double, double>::instance()->create(
            "BetaDist", std::move(params_fitted1_(2)),
            std::move(params_fitted2_(2)));

    transformed_params(2) =
        ((beta_dist->inv_cumulative_dist_func(
              standard_normal->cumulative_dist_func(
                  std::vector<double>{parameters(2)})))
             .at(0)) *
            (params_upper_bound_(2) - params_lower_bound_(2)) +
        params_lower_bound_(2);

    // Calculate nu
    auto uniform_dist =
        Factory<stochastic::Distribution, double, double>::instance()->create(
            "UniformDist", std::move(params_lower_bound_(3)),
            std::move(params_upper_bound_(3)));

    transformed_params(3) = (uniform_dist->inv_cumulative_dist_func(
                                 standard_normal->cumulative_dist_func(
                                     std::vector<double>{parameters{3}})))
                                .at(0);

    // Calculate f' residual
    transformed_params(10) =
        inv_double_exp(standard_normal->cumulative_dist_func(
                           std::vector<double>{parameters(10)}),
                       params_fitted1_(10), params_fitted2_(10),
                       params_fitted3_(10), params_lower_bound_(10));

    // Calculate depth_to_rupt residual
    beta_dist =
        Factory<stochastic::Distribution, double, double>::instance()->create(
            "BetaDist", std::move(params_fitted1_(11)),
            std::move(params_fitted2_(11)));

    transformed_params(11) =
        std::exp(((beta_dist->inv_cumulative_dist_func(
                       standard_normal->cumulative_dist_func(
                           std::vector<double>{parameters(11)})))
                      .at(0)) *
                     (params_upper_bound_(11) - params_lower_bound_(11)) +
                 params_lower_bound_(11));

    // Calculate f' pulse-only
    transformed_params(17) =
        inv_double_exp(standard_normal->cumulative_dist_func(
                           std::vector<double>{parameters(17)}),
                       params_fitted1_(17), params_fitted2_(17),
                       params_fitted3_(17), params_lower_bound_(17));    

    // Calculate depth_to_rupt pulse-only
    beta_dist =
        Factory<stochastic::Distribution, double, double>::instance()->create(
            "BetaDist", std::move(params_fitted1_(18)),
            std::move(params_fitted2_(18)));

    transformed_params(18) =
        std::exp(((beta_dist->inv_cumulative_dist_func(
                       standard_normal->cumulative_dist_func(
                           std::vector<double>{parameters(18)})))
                      .at(0)) *
                     (params_upper_bound_(18) - params_lower_bound_(18)) +
                 params_lower_bound_(18));
  } else {
    std::vector<unsigned int> indices = {0, 1, 2, 3, 4, 7, 8, 9, 10, 11};
    for (auto const& index : indices) {
      transformed_params(index) = std::exp(parameters(index));
    }

    // Calculate f' component 1
    transformed_params(5) =
        inv_double_exp(standard_normal->cumulative_dist_func(
                           std::vector<double>{parameters(5)}),
                       params_fitted1_(10), params_fitted2_(10), params_fitted3_(10), params_lower_bound_(10));

    // Calculate depth_to_rupture component 1
    auto beta_dist =
        Factory<stochastic::Distribution, double, double>::instance()->create(
            "BetaDist", std::move(params_fitted1_(11)),
            std::move(params_fitted2_(11)));

    transformed_params(6) =
        std::exp(((beta_dist->inv_cumulative_dist_func(
                       standard_normal->cumulative_dist_func(
                           std::vector<double>{parameters(6)})))
                      .at(0)) *
                     (params_upper_bound_(11) - params_lower_bound_(11)) +
                 params_lower_bound_(11));

    // Calculate f' component 2
    transformed_params(12) =
        inv_double_exp(standard_normal->cumulative_dist_func(
                           std::vector<double>{parameters(12)}),
                       params_fitted1_(17), params_fitted2_(17), params_fitted3_(17), params_lower_bound_(17));

    // Calculate depth_to_rupture compenent 2
    beta_dist =
        Factory<stochastic::Distribution, double, double>::instance()->create(
            "BetaDist", std::move(params_fitted1_(18)),
            std::move(params_fitted2_(18)));

    transformed_params(13) =
        std::exp(((beta_dist->inv_cumulative_dist_func(
                       standard_normal->cumulative_dist_func(
                           std::vector<double>{parameters(13)})))
                      .at(0)) *
                     (params_upper_bound_(18) - params_lower_bound_(18)) +
                 params_lower_bound_(18));
  }

  // Set input vector of parameters to transformed parameters
  parameters = transformed_params;
}

double stochastic::DabaghiDerKiureghian::inv_double_exp(
    double probability, double param_a, double param_b, double param_b,
    double lower_bound) const {
  if (probability < 0.0 || probability > 1.0) {
    throw std::runtime_error(
        "\nERROR: in stochastic::DabaghiDerKiureghian::inv_double_exp: "
        "Probability argument less than 0.0 or greater than 1.0\n");
  }

  double location_inv =
      (1.0 / param_b) * std::log((param_b / param_c) * probability +
                                 std::exp(param_b * lower_bound));

  if (location_inv < lower_bound || location_inv > 0.0) {
    location_inv =
        -(1.0 / param_a) *
        std::log((param_a / param_b) * (1.0 - std::exp(param_b * lower_bound)) -
                 (param_a / param_c) * probability + 1.0);
  }

  return location_inv;
}

void stochastic::DabaghiDerKiureghian::simulate_near_fault_ground_motion(
    bool pulse_like, const Eigen::VectorXd& parameters,
    std::vector<double>& accel_comp_1, std::vector<double>& accel_comp_2,
    unsigned int num_gms = 1) const {
  
  // Extract parameters for two components of ground motion
  Eigen::VectorXd alpha_1 =
      pulse_like ? parameters.segment(5, 7) : parameters.segment(0, 7);
  Eigen::VectorXd alpha_2 =
      pulse_like ? parameters.segment(12, 7) : parameters.segment(7, 7);

  // Set modulating and filter parameters
  // CONTINUE HERE AFTER WRITING FUNCTION FOR BACKCALCULATING PARAMS
}

Eigen::VectorXd
    stochastic::DabaghiDerKiureghian::backcalculate_modulating_params(
        const Eigen::VectorXd& q_params, double t0 = 0.0) const {
  // CONTINUE HERE AFTER ADDING NELDER-MEAD
}
